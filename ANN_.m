function output = ANN_(Y,X,horizon)
%  artificial neuron network 
% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by NFTOOL
% Created Wed Nov 13 19:02:43 IRST 2013
%
% This script assumes these variables are defined:
%
%   Ptra - input data.
%   Ttra - target data.
    nf = size(X,2);% number of variables
    ns = size(Y,1); % Sample size
    
    TraR=70;% Traing size
    ValT=10;% Validating size
    
    nsTra = round(TraR*ns/100);
    VaTra= round((ValT+TraR)*ns/100);
   
    X=[X;nan(horizon,nf)];
    Y=[Y(:);nan(horizon,1)];
X=lagmatrix(X,horizon);

X(1:horizon,:)=[];
Y(1:horizon,:)=[];

inputs = X(:,:)';
targets = Y';

% Create a Fitting Network
hiddenLayerSize = 25;  % number of hidden layer
net = fitnet(hiddenLayerSize);

% Choose Input and Output Pre/Post-Processing Functions
% For a list of all processing functions type: help nnprocess
net.inputs{1}.processFcns = {'removeconstantrows','mapminmax'};
net.outputs{2}.processFcns = {'removeconstantrows','mapminmax'};


% Setup Division of Data for Training, Validation, Testing
% For a list of all data division functions type: help nndivide

net.divideFcn = 'divideind';  % Divide data using specified indices
net.divideMode = 'sample';  % Divide up every sample
net.divideParam.trainInd = 1:nsTra; % 70 percet of Data
net.divideParam.valInd = nsTra+1:VaTra; % 10 percent of Data
net.divideParam.testInd = VaTra+1:ns;  % 20 percent of data

%net.divideFcn = 'dividerand';  % Divide data randomly 
%net.divideMode = 'sample';  % Divide up every sample
%net.divideParam.trainRatio = 0.7;
%net.divideParam.valRatio= 0.15; 
%net.divideParam.testRatio = 0.15; 


% For help on training function 'trainlm' type: help trainlm
% For a list of all training functions type: help nntrain
net.trainFcn = 'trainlm';  % Levenberg-Marquardt

% Choose a Performance Function
% For a list of all performance functions type: help nnperformance
net.performFcn = 'mse';  % Mean squared error

% Choose Plot Functions
% For a list of all plot functions type: help nnplot
net.plotFcns = {'plotperform','plottrainstate','ploterrhist', ...
  'plotregression', 'plotfit'};


% Train the Network
[net,tr] = train(net,inputs,targets);

% Test the Network
output = net(inputs);
errors = gsubtract(targets,output);
performance = perform(net,targets,output);

% Recalculate Training, Validation and Test Performance
trainTargets = targets .* tr.trainMask{1};
valTargets = targets  .* tr.valMask{1};
testTargets = targets  .* tr.testMask{1};
trainPerformance = perform(net,trainTargets,output);
valPerformance = perform(net,valTargets,output);
testPerformance = perform(net,testTargets,output);


RMSE_train = trainPerformance^0.5;
RMSE_test = testPerformance^0.5;
output=output(end-horizon+1:end);
% View the Network
%view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, plotfit(net,inputs,targets)
%figure, plotregression(targets,outputs)
%figure, ploterrhist(errors)

%figure, plot(outputs)
%hold on 
%plot(targets,'--r')
